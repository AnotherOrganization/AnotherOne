### Goals and Constraints ###
The project goals can be divided into two categories. The first consists of
mandatory goals which must be implemented in order to meet the minimum project
requirements. The second category includes goals which, while not absolutely necessary, would
enhance the quality of the project and set Mytinerary apart from other program planners.
These secondary goals were set by asking ourselves what features \emph{we} would look for
in a program planner. Additionally, a survey targeting Concordia software engineering
students was conducted to gauge interest in proposed features, including multilingual
support and integration with Rate-My-Professor. The data from this survey are
presented in Appendix A.

# Functional Requirements #
The following use cases summarize Mytinerary's functional requirements. Each
use case will deal with two possible actors: a student, who will use the
system to generate course schedules, and a program director, who can modify
course and section information.

Difficult and importance are scored on a scale of 1 to 10, with 10 denoting
extremely high difficulty/importance.


Use case: Log in
Actors: Student, program director
Goal: Gain access to website services.
Preconditions: User must be a registered user in the system's database.
Summary: User logs into the website by providing their username and password.
Trigger: User enters their username and password into the respective fields.
Basic course of events:
1. System prompts the user to log in when the user accesses the website.
2. User enters their username and password.
3. System verifies the login information.
4. User is logged in.
Exception paths:
1. System prompts the user to log in when the user accesses the website.
2. User enters their username and password.
3. System determines that either the username or password were entered incorrectly.
4. User is informed of the failed login attempt and is asked to re-enter their
user credentials.
Postconditions: User is logged in, meaning that they have access to restricted content,
including the user's private data. This is accomplished by giving the user an
authentification cookie.
Difficult: 3
Importance: 10


Use case: Log out
Actors: Student, program director
Goal: Prevent future users of the browser section to have access to user's credentials.
Preconditions: User must be logged in. That is, user must have the required authentification
cookie.
Summary: User logs out of the system, preventing anyone who uses their browser
afterwards from having access to the site under the user's name.
Trigger: User indicates intention to log off.
Basic course of action:
1. User indicates intention to log off.
2. User if logged off of the system.
3. User is directed to the website's login page.
Postconditions: User is logged off, meaning that they no longer have access
to restricted content such as the user's private data. This is accomplished by having the
system no longer recognize the previous authentification cookie.
Difficulty: 2
Importance: 10


Use case: Return to home page
Actors: Student, program director
Goal: Return to the website's home page.
Precondition: User must be logged in. That is, user must have the required authentification
cookie.
Summary: User indicates their intention to return to the home page in order to
access all of the site's facilities.
Trigger: User indicates intention to return to the home page.
Basic course of events:
1. User indicates intention to return to home page.
2. User is brought to home page.
Difficulty: 2
Importance: 8


Use case: View academic record
Actors: Student
Goal: View personal academic record.
Preconditions: User must be logged in and in the home page.
Summary: User indicates that they wish to view their academic record, at which
point the system retrieves and displays their academic record.
Trigger: User indicates that they wish to view their academic record.
Basic course of events:
1. User indicates intention to view academic record.
2. Academic record is presented to user.
Difficulty: 2
Importance: 7


Use case: View student's academic record
Actors: Program director
Goal: View the academic record of a selected student.
Precondition: User must be a program director. Student must exist in the system's
database.
Summary: Program director requests access to academic record of selected student,
which is then displayed.
Trigger: Program director indicates intention to view a student's academic record.
Basic course of events:
1. User indicates intention to view academic record.
2. System prompts user to enter either the name of the student or the student's Concordia ID number.
3. System verifies that user is a program director.
4. System verifies that specified student exists.
5. System retrieves student's academic record and displays it to the user.
Exception paths:
Student does not exist:
1. User indicates intention to view academic record.
2. System prompts user to enter either the name of the student or the student's Concordia ID number.
3. System verifies that user is a program director.
4. System determines that specified student does not exist.
5. User is informed that specified student does not exist, and is prompted to re-enter
the student's identifying information.
User is not a program director:
1. User indicates intention to view academic record.
2. System prompts user to enter either the name of the student or the student's Concordia ID number.
3. System determines that the user is not a program director. This shouldn't happen, as
non-program directors will not be given the opportunity to even attempt to view
a student's academic record other than their own; however, for extra security the
system will perform this check.
4. User presented with an error message and is immediately logged off.
Difficulty: 3
Importance: 6


Use case: View course listing
Actors: Student, program director
Goal: View a list of available courses.
Summary: A list of all available courses, grouped by program and sorted in numerical order, is presented to
the user.
Trigger: User indicates intention to see course list.
Basic course of events:
1. User indicated intention to see course list.
2. System retrieves list of courses and displays them to user in appropriate order.
Difficulty: 2
Importance: 8


Use case: View academic progress
Actors: Student
Goal: View current progress towards completing degree in Software Engineering.
Precondition: User is logged in as a user. That is, user must have the required authentification
cookie.
Included use case: View course listing.
Summary: When accessing list of courses, system will present a summary of user's
progress towards their Software Engineering degree.
Trigger: User indicates intention to see course list.
Basic course of events:
1. User indicates intention to see course list.
2. System retrieves list of courses (see use case: View course listing).
3. System accesses student's academic record to determine courses that have been
completed.
4. System compares completed courses versus required courses.
5. System displays course list to user along with information highlighting their
academic progress.
Difficulty: 4
Importance: 6


Use case: View course details
Actors: Student, program director
Goal: View details of specified course.
Precondition: Course exists in the system's database.
Summary: Users enters a course number to view details such as location, number
of credits, prerequisites, etc.
Trigger: User enters course number into appropriate field.
Basic course of events:
1. User indicates intention to view course details.
2. User enters course number into appropriate field.
3. System retrieves course information and displays it to user.
Exception paths:
Course does not exist:
1. User indicates intention to view course details.
2. User enters course number into appropriate field.
3. System does not find any course matching that course number.
4. User is informed that the specified course does not exist, and is re-prompted
to enter a course number.
Difficulty: 3
Importance: 8


Use case: Modify course details
Actors: Program director
Goal: Modify the details of a course.
Extended use case: View course details
Precondition: User is a program director. Course exists in the system's database.
Summary: User specifies a course to modify. Properties of the ocurse thatn can be
modified include location, time, professor, class capacity, etc.
Trigger: User enters course number into appropriate field.
Basic course of events:
1. User indicates intention to modify course details.
2. User enters course number into appropriate field.
3. System retrieves course information and displays it to user.
4. System displays fields where user can edit course information.
5. User enters new course information.
6. System checks that user is a program director.
7. System modifies course information based on user input.
Exception paths:
Course does not exist:
1. User indicates intention to modify course details.
2. User enters course number into appropriate field.
3. System does not find any course matching that course number.
4. User is informed that the specified course does not exist, and is re-prompted
to enter a course number.
User is not a program director:
1. User indicates intention to modify course details.
2. User enters course number into appropriate field.
3. System retrieves course information and displays it to user.
4. System displays fields where user can edit course information.
5. User enters new course information.
6. System confirms that user is not a program director. An error message is displayed
and the user is logged off the system. This should not happen in practice, as the
user should not be given the opportunity to even attempt to modify course information.
Difficulty: 3
Importance: 7


Use case: View news feed
Actors: Student, program director
Goal: Present users with a news feed.
Precondition: User is logged in and on the home page.
Summary: User is presented with headlines of news around the world.
Trigger: User is on the home page.
Basic course of events:
1. User is on the home page and is presented with headlines of current news.
Difficulty: 5
Importance: 2


Use case: Set schedule preferences
Actors: Student
Goal: User sets their preferences for the type of schedule they want.
Precondition: User is logged in.
Summary: User sets their schedule preferences, which may include their available
times, days they cannot go to school on, number of credits they wish to take, etc.
Trigger: User requests to edit schedule preferences.
Basic course of events:
1. User requests to edit schedule preferences.
2. System presents user with an interface to set preferences.
3. User uses this interface to set their preferences, which the system then saves.
Postconditions: User preferences are saved in the database.
Difficulty: 3
Importance: 9


Use case: Select course for schedule
Actors: Student
Goal: User selects a course they wish to be added to their next schedule.
Precondition: User is logged in and they are elegible to take the specified course.
Included use cases: View course listing OR view course details
Summary: User adds a course they wish to be included in their next schedule.
Trigger:
Basic course of events:
1. User selects a course to be added, either by searching specifically for the course
(see use case View course details) or by selecting the course in the list of available courses
(see use case View course listing).
Difficulty: 4
Importance: 9

# Domain Model #
Figure \ref{fig:domain_model} illustrates a domain model for our system. The principal domain objects are the student, the course section, and the scheduler itself. Students, who are users, have preferences and an academic record and interact with the scheduler. The scheduler in turn consults the student's academic record and preferences, the requirements of the program the student is enrolled in, and the available course sections offered in each semester to generate a list of tentative schedules for the student to select. Course sections consist possibly of a tutorial section and a lab and are in turn instances of the more general course object. Finally there are program directors, who are users of the system with the privilege to view and modify student academic records and manage course details.


# Constraints and Qualities #
Security
Mytinerary shall ensure that login is protected a strong hashing algorithm. The blowfish hashing function is provided by PHP’s hashing function ‘password_hash()’ which generate a unique hash of a password. Unlike traditional md5 hash, hashing would produce two identical hashes if the same passwords was used. Using md5 would be valuable if a dictionary attack is performed.
 
Mytinerary shall ensure that data transactions between the application and server are secure by the blowfish encrypting algorithm. The scheduler is one page user interface which means that when passing serialized data of PHP objects they are vulnerable to changes if the client decides to alter the string. Thus encrypting the string would prevent any alternation and stay consistent.  
 
Forms are validated automatically through CodeIgniter’s form validation library. It filters html escape strings and cross site scripting (xss) attacks.

Speed

The web app shall load a page quickly. Codeigniter provides database caching which is useful where requesting select query to the database. By caching the select requests, less queries can reduce a large percentage load on the database.
 
All pages within the website should be accessible in under one second.

Usability 

The web application should be cross-platform compatible usable through various mobile ,tablet and desktop systems. Various broswers support like the Google Chrome, Safari and edge by Microsoft. With the help of normalize it will render HTML and CSS consistent across all web browser. Mytinerary will be enable to support Legacy web browers with the help of Modernizer. A library writing in Javascript aids the brower with unsupported features



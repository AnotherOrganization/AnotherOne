Upon entering the websites URL the user is presented with a login page. The login page features a brief description of the current situation, for instance any course issues or service downtime would be displayed here. The users also have the ability to view courses in any given semester without needing to log in. The login system security is handled by hashing the entered username and password using the Blowfish algorithm and sent to the database for server side validation.  
Once logged in the users are sent to the default home page with various options presented to them.  Additionally, there is also a section to contain relevant news that will updated on a regular interval. This section is currently created by using JSON and the New York Times API. 
The first selectable option is the student profile. 
The second selectable option leads to the registration page. Here students can search for courses in a selected semester in order to generate schedules. There is also an option to auto-generate schedules that is currently in development. Students can apply time preferences to generate their ideal schedule. The generated schedule is displayed on the same page using client side JavaScript and jQuery to dynamically generate the schedule as the user selects or edits information. Students can generate up to five schedules at a time to allow for quick comparisons between different schedules. Students can add courses to the courses tab but in the event that they lack the necessary prerequisites or co-requisites they will not be able to add the course onto the registered tab. This validation is handled by dynamically checking the students registered course within the database.
At any time users can click on the mytinerary logo on the top left corner to be redirected to the home page. At the home page students can also view available courses as well as their current schedule. Mytinerary is cross-platform compatible in addition to featuring a responsive layout and automatic scaling. This is achieved using HTML5 and Bootstrap as the front-end framework. Any APIs to be used will also avoid being platform specific to ensure usability across all devices.

